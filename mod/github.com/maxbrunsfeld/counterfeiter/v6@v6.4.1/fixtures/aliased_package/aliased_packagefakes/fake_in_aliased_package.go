// Code generated by counterfeiter. DO NOT EDIT.
package aliased_packagefakes

import (
	"sync"

	the_aliased_package "github.com/maxbrunsfeld/counterfeiter/v6/fixtures/aliased_package"
)

type FakeInAliasedPackage struct {
	StuffStub        func(int) string
	stuffMutex       sync.RWMutex
	stuffArgsForCall []struct {
		arg1 int
	}
	stuffReturns struct {
		result1 string
	}
	stuffReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInAliasedPackage) Stuff(arg1 int) string {
	fake.stuffMutex.Lock()
	ret, specificReturn := fake.stuffReturnsOnCall[len(fake.stuffArgsForCall)]
	fake.stuffArgsForCall = append(fake.stuffArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.StuffStub
	fakeReturns := fake.stuffReturns
	fake.recordInvocation("Stuff", []interface{}{arg1})
	fake.stuffMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInAliasedPackage) StuffCallCount() int {
	fake.stuffMutex.RLock()
	defer fake.stuffMutex.RUnlock()
	return len(fake.stuffArgsForCall)
}

func (fake *FakeInAliasedPackage) StuffCalls(stub func(int) string) {
	fake.stuffMutex.Lock()
	defer fake.stuffMutex.Unlock()
	fake.StuffStub = stub
}

func (fake *FakeInAliasedPackage) StuffArgsForCall(i int) int {
	fake.stuffMutex.RLock()
	defer fake.stuffMutex.RUnlock()
	argsForCall := fake.stuffArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInAliasedPackage) StuffReturns(result1 string) {
	fake.stuffMutex.Lock()
	defer fake.stuffMutex.Unlock()
	fake.StuffStub = nil
	fake.stuffReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInAliasedPackage) StuffReturnsOnCall(i int, result1 string) {
	fake.stuffMutex.Lock()
	defer fake.stuffMutex.Unlock()
	fake.StuffStub = nil
	if fake.stuffReturnsOnCall == nil {
		fake.stuffReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.stuffReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInAliasedPackage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stuffMutex.RLock()
	defer fake.stuffMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInAliasedPackage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ the_aliased_package.InAliasedPackage = new(FakeInAliasedPackage)
