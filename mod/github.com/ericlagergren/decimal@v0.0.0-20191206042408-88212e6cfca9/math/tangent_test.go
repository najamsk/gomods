package math

import (
	"fmt"
	"strconv"
	"testing"

	"github.com/ericlagergren/decimal"
)

func TestTan(t *testing.T) {
	diff := new(decimal.Big)
	eps := new(decimal.Big)

	for i, tt := range [...]struct {
		x, r string
	}{
		// note the expected values came from wolframalpha.com
		// the first group is|theta|< Pi/2
		{"0", "0"},
		{pos(_pi_4, 100), "0.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998"},
		{neg(_pi_4, 100), "-0.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998"},
		{pos(_pi_3, 100), "1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248574"},
		{neg(_pi_3, 100), "-1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248574"},

		// "near" pi/2 .. because at p/2 with infinite precision the result would be Inf
		{"1.4000000000000000000000000", "5.7978837154828896437077202"},
		{"-1.4000000000000000000000000", "-5.7978837154828896437077202"},
		{pos(_pi_2, 17), "5.1998506188720271E16"},
		{neg(_pi_2, 17), "-5.1998506188720271E16"},
		{pos(_pi_2, 30), "1.02548934802693187243286598565E+29"},
		{neg(_pi_2, 30), "-1.02548934802693187243286598565E+29"},
		{pos(_pi_2, 50), "1.8899844771296019351604660349192831433443369043068E49"},
		{neg(_pi_2, 50), "-1.8899844771296019351604660349192831433443369043068E49"},
		{pos(_pi_2, 60), "4.35510876003321014579598280859551726015883372322953933150280E59"},
		{neg(_pi_2, 60), "-4.35510876003321014579598280859551726015883372322953933150280E59"},

		//the next group is   Pi/2 < |theta|
		{pos(_2pi_3, 100), "-1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248578"},
		{neg(_2pi_3, 100), "1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248578"},
		{pos(_3pi_4, 100), "-1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"},
		{neg(_3pi_4, 100), "1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"},
		{pos(_pi, 100), "0"},
		{neg(_pi, 100), "0"},
		{pos(_5pi_4, 100), "0.999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998"},
		{neg(_5pi_4, 100), "-0.999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998"},
		{pos(_4pi_3, 100), "1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248574"},
		{neg(_4pi_3, 100), "-1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248574"},
		{pos(_5pi_3, 100), "-1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248578"},
		{neg(_5pi_3, 100), "1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248578"},
		{pos(_7pi_4, 100), "-1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"},
		{neg(_7pi_4, 100), "1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"},
		{pos(_2pi, 100), "0"},
		{neg(_2pi, 100), "0"},
	} {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			x, _ := new(decimal.Big).SetString(tt.x)
			r, _ := new(decimal.Big).SetString(tt.r)
			z := decimal.WithPrecision(r.Precision())

			Tan(z, x)
			eps.SetMantScale(1, z.Context.Precision)
			if z.Cmp(r) != 0 && diff.Sub(r, z).CmpAbs(eps) > 0 {
				t.Errorf(`#%d: Tan(%s)
wanted: %s
got   : %s
diff  : %s
`, i, x, r, z, diff)
			}
		})
	}
}

var tan_X, _ = new(decimal.Big).SetString("0.7853981633974483096156608458198757210492923498437764552437361480769541015715522496570087063355292670")

func BenchmarkTangent(b *testing.B) {
	for _, prec := range benchPrecs {
		b.Run(fmt.Sprintf("%d", prec), func(b *testing.B) {
			z := decimal.WithPrecision(prec)
			for j := 0; j < b.N; j++ {
				Tan(z, tan_X)
			}
			gB = z
		})
	}
}
