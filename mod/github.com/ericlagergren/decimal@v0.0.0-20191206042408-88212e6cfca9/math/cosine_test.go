package math

import (
	"fmt"
	"strconv"
	"testing"

	"github.com/ericlagergren/decimal"
)

func TestCos(t *testing.T) {
	const N = 100
	diff := decimal.WithPrecision(N)
	eps := decimal.New(1, 100)
	for i, tt := range [...]struct {
		x, r string
	}{
		// note the expected values came from wolframalpha.com
		//the input is string values (x)' truncated to specific digit length the result is from those values evaluated @ wolframaplha.com to the same number of digits
		{"0", "1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
		{pos(_pi_4, N), "0.7071067811865475244008443621048490392848359376884740365883398689953662392310535194251937671638207864"},
		{neg(_pi_4, N), "0.7071067811865475244008443621048490392848359376884740365883398689953662392310535194251937671638207864"},
		{pos(_pi_3, N), "0.5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"},
		{neg(_pi_3, N), "0.5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"},
		{pos(_pi_2, N), "9.910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651910E-100"},
		{neg(_pi_2, N), "9.910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651910E-100"},
		{pos(_3pi_4, N), "-0.7071067811865475244008443621048490392848359376884740365883398689953662392310535194251937671638207857"},
		{neg(_3pi_4, N), "-0.7071067811865475244008443621048490392848359376884740365883398689953662392310535194251937671638207857"},
		{pos(_pi, N), "-1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
		{neg(_pi, N), "-1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
		{pos(_5pi_4, N), "-0.7071067811865475244008443621048490392848359376884740365883398689953662392310535194251937671638207871"},
		{neg(_5pi_4, N), "-0.7071067811865475244008443621048490392848359376884740365883398689953662392310535194251937671638207871"},
		{pos(_3pi_2, N), "-9.732221297699234599706407669143258733475880391121927216761754261540529077816583394669344234323955729E-100"},
		{neg(_3pi_2, N), "-9.732221297699234599706407669143258733475880391121927216761754261540529077816583394669344234323955729E-100"},
		{pos(_2pi, N), "1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
		{neg(_2pi, N), "1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
		{"100.0", "0.8623188722876839341019385139508425355100840085355108292801621126927210880509266241030951056842772851"},
		{"-100.0", "0.8623188722876839341019385139508425355100840085355108292801621126927210880509266241030951056842772851"},
	} {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			z := decimal.WithPrecision(N)
			x, _ := new(decimal.Big).SetString(tt.x)
			r, _ := new(decimal.Big).SetString(tt.r)

			Cos(z, x)
			if z.Cmp(r) != 0 && diff.Sub(r, z).CmpAbs(eps) > 0 {
				t.Errorf(`#%d: Cos(%s)
wanted: %s
got   : %s
diff  : %s
`, i, x, r, z, diff)
			}
		})
	}
}

func BenchmarkCos(b *testing.B) {
	x := new(decimal.Big)
	for i, n := range [...]string{
		"0", _pi_6, _pi_5, _pi_4, _pi_3, _pi_2, _2pi_3, _pi, _2pi,
	} {
		b.Run(fmt.Sprintf("%d", i), func(b *testing.B) {
			for _, prec := range benchPrecs {
				x.SetString(n)
				b.Run(fmt.Sprintf("%d", prec), func(b *testing.B) {
					z := decimal.WithPrecision(prec)
					for j := 0; j < b.N; j++ {
						Cos(z, x)
					}
					gB = z
				})
			}
		})
	}
}
