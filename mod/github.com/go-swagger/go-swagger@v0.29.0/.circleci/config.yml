version: 2.1
commands:
  download_dependencies:
    description: "download dependencies including test dependencies"
    parameters:
      test:
        type: boolean
        default: false
    steps:
      - run:
          name: download dependencies
          command: |
            n=0
            until [ $n -ge 5 ]
            do
                go mod download && break
                n=$[$n+1]
                sleep 1
            done
            <<# parameters.test >>
            # test dependencies
            go get -u gotest.tools/gotestsum gotest.tools/icmd github.com/logrusorgru/aurora
            <</ parameters.test >>

  prepare_directory_layout:
    description: "prepare directory layout to run tests"
    parameters:
      dir:
        type: string
        default: "/usr/share/testresults"
    steps:
      - run:
          name: Prepare directory layout
          command: |
             mkdir -p <<parameters.dir>>

  build_statically_linked_binary:
    description: "builds a statically linked binary"
    parameters:
      target:
        type: string
        default: "./dist/swagger-musl"
    steps:
      - run:
          name: Build statically linked binary
          command: |
            rm -rf dist
            mkdir -p dist
            LDFLAGS="-s -w -linkmode external -extldflags \"-static\""
            LDFLAGS="$LDFLAGS -X github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/cmd/swagger/commands.Commit=${CIRCLE_SHA1}"
            LDFLAGS="$LDFLAGS -X github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/cmd/swagger/commands.Version=${CIRCLE_TAG-dev}"
            go build -o <<parameters.target>> -ldflags "$LDFLAGS" -a  ./cmd/swagger

workflows:
  version: 2
  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 6"
          filters:
            branches:
              only:
                - master
    jobs:
      - debian_builder
      - alpine_builder

  build_and_test:
    jobs:
      - lint
      - build

      - test:
          requires:
            - lint
            - build
          filters:
            tags:
              only: /^v.*/

      - codegen_tests:
          requires:
            - lint
            - build
          filters:
            tags:
              only: /^v.*/

      - canary_tests:
          filters:
            tags:
              only: /^v.*/
          requires:
            - lint
            - build

      - publish_dev:
          requires:
            - test
            - codegen_tests
            - canary_tests
          filters:
            branches:
              only:
                - master

      - publish_release:
          requires:
            - test
            - codegen_tests
            - canary_tests
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - publish_release_docker:
          requires:
            - test
            - codegen_tests
            - canary_tests
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

jobs:
  lint:
    docker:
      - image: goswagger/builder:debian
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Install golangci-lint
          command: go get github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - run:
          name: Run linting
          command: golangci-lint run --timeout 2m --new-from-rev master
          no_output_timeout: 2m

  build:
    docker:
      - image: goswagger/builder:debian
    steps:
      - checkout

      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}

      - download_dependencies:
          test: true

      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - prepare_directory_layout

      - run:
          name: Build binary
          command: ./hack/build-docker.sh --circleci

  test:
    docker:
      - image: goswagger/builder:debian
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}

      - download_dependencies:
          test: true

      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - prepare_directory_layout:
          dir: /usr/share/coverage

      - prepare_directory_layout:
          dir: /usr/share/testresults

      # - run:
      #     name: Run tests with race detection
      #     command: go test -race -p 1 -timeout=20m ./...
      #     no_output_timeout: 30m

      - run:
          name: Run unit tests with code coverage
          command: gotestsum --junitfile /usr/share/testresults/go-test-report.xml -f short-verbose -- -p 1 -timeout=20m -coverprofile=coverage.txt -covermode=atomic ./...
          no_output_timeout: 30m

      - run:
          name: Submit coverage results
          command: bash <(curl -s https://codecov.io/bash)

      - run:
          name: Save coverage html report
          command: |
            gocov convert coverage.txt | gocov-html > /usr/share/coverage/coverage-${CIRCLE_BUILD_NUM-"0"}.html

      - store_test_results:
          path: /usr/share/testresults

  codegen_tests:
    docker:
      - image: goswagger/builder:debian
    steps:
      - checkout

      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}

      - download_dependencies:
          test: true

      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - run: go install ./cmd/swagger

      - run:
          name: Test codegen builds
          command: go test -v -timeout 30m -parallel 3 hack/codegen_nonreg_test.go -args -fixture-file codegen-fixtures.yaml -skip-models -skip-full-flatten
          no_output_timeout: 30m

  canary_tests:
    docker:
      - image: goswagger/builder:debian
    steps:
      - checkout

      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}

      - download_dependencies:
          test: true

      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run: go install ./cmd/swagger

      - run:
          name: Test canary builds
          command: go test -v -timeout 30m hack/codegen_nonreg_test.go -args -fixture-file canary-fixtures.yaml -skip-models -skip-full-flatten -skip-expand
          no_output_timeout: 30m

  publish_release:
    docker:
      - image: goswagger/builder:debian
    steps:
      - checkout
      - run:
          name: Prepare environment
          command: |
            rm -rf dist
            mkdir -p dist/bin
            mkdir -p dist/build

      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}

      - download_dependencies

      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - run:
          name: Build binaries
          command: |
            build_binary() {
              LDFLAGS="-s -w -X github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/cmd/swagger/commands.Commit=${CIRCLE_SHA1}"
              LDFLAGS="$LDFLAGS -X github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/cmd/swagger/commands.Version=${CIRCLE_TAG-dev}"
              gox -ldflags "$LDFLAGS" -tags netgo -output "./dist/bin/{{.Dir}}_{{.OS}}_{{.Arch}}" "$@" ./cmd/swagger
            }
            build_binary -os="linux darwin windows" -arch="amd64 386"
            build_binary -os="linux darwin" -arch="arm64 arm"
            build_binary -os="linux" -arch="ppc64le"

      - run:
          name: Build packages
          command: |
            nfpm p -p deb -t dist/build
            nfpm p -p rpm -t dist/build

      - run:
          name: Upload to cloudsmith
          command: |
            nver="${CIRCLE_TAG:1}"
            cloudsmith push deb "dist/build/swagger_${nver}_amd64.deb"
            cloudsmith push rpm "dist/build/swagger_${nver}.x86_64.rpm"

      - run:
          name: Upload to github
          command: |
            notes="$(cat notes/${CIRCLE_TAG}.md)"
            pushd dist/bin
            sha1sum * > sha1sum.txt
            sha256sum * > sha256sum.txt

            github-release release -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME -t $CIRCLE_TAG -d "$notes"
            for f in *; do
              github-release upload -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME -t $CIRCLE_TAG -n $f -f $f
            done

            popd

      - store_artifacts:
          path: /usr/share/dist

  publish_release_docker:
    docker:
      - image: goswagger/builder:alpine
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}

      - download_dependencies

      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - build_statically_linked_binary

      - run:
          name: Build container
          command: |
            docker build --pull --build-arg commit_hash="$CIRCLE_SHA1" --build-arg tag_name="${CIRCLE_TAG-dev}" -t quay.io/goswagger/swagger:latest -t quay.io/goswagger/swagger:${CIRCLE_TAG-dev} ./deploybuild

      - run:
          name: Publish container
          command: |
            echo $QUAY_PASS | docker login -u $API_USERNAME --password-stdin https://quay.io
            docker push quay.io/goswagger/swagger:${CIRCLE_TAG-dev}
            docker push quay.io/goswagger/swagger:latest

      - store_artifacts:
          path: /usr/share/dist

  publish_dev:
    docker:
      - image: goswagger/builder:alpine
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}

      - download_dependencies

      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - setup_remote_docker

      - build_statically_linked_binary

      - run:
          name: Build container
          command: |
            docker build --pull --build-arg commit_hash="$CIRCLE_SHA1" --build-arg tag_name="dev" -t quay.io/goswagger/swagger:dev .

      - run:
          name: Publish container
          command: |
            echo $QUAY_PASS | docker login -u $API_USERNAME --password-stdin https://quay.io
            docker push quay.io/goswagger/swagger:dev

  debian_builder:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build debian builder image
          command: |
            docker build --pull -t goswagger/builder:debian -f Dockerfile.ci .
            echo $DOCKER_PASS | docker login -u $API_USERNAME --password-stdin
            docker push goswagger/builder:debian

  alpine_builder:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build alpine builder image
          command: |
            docker build --pull -t goswagger/builder:alpine -f Dockerfile.alpine.ci .
            echo $DOCKER_PASS | docker login -u $API_USERNAME --password-stdin
            docker push goswagger/builder:alpine
